import os
import json
from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_community.tools import DuckDuckGoSearchRun
from langchain.agents import AgentExecutor, create_react_agent
from langchain_core.prompts import ChatPromptTemplate, PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from config import Config

# Cargar variables de entorno
load_dotenv()

app = Flask(__name__)
app.config.from_object(Config)

# Validar configuraci√≥n antes de continuar
try:
    Config.validate_config()
except ValueError as e:
    print(f"‚ùå Error de configuraci√≥n: {e}")
    print("üí° Aseg√∫rate de que el archivo .env contenga GOOGLE_API_KEY")
    exit(1)

# Configurar el modelo de IA
if Config.GOOGLE_API_KEY:
    os.environ["GOOGLE_API_KEY"] = Config.GOOGLE_API_KEY

llm = ChatGoogleGenerativeAI(
    model="gemini-pro", 
    temperature=Config.DEFAULT_TEMPERATURE
)

# Configurar herramientas para el agente
tools = [DuckDuckGoSearchRun()]

# Prompt personalizado para el agente
agent_prompt = PromptTemplate.from_template("""
Eres un asistente inteligente que puede ayudar con informaci√≥n actual y realizar b√∫squedas web cuando sea necesario.

Tienes acceso a las siguientes herramientas:
{tools}

Usa el siguiente formato:

Pregunta: la pregunta de entrada que debes responder
Pensamiento: siempre debes pensar sobre qu√© hacer
Acci√≥n: la acci√≥n a tomar, debe ser una de [{tool_names}]
Entrada de Acci√≥n: la entrada a la acci√≥n
Observaci√≥n: el resultado de la acci√≥n
... (este Pensamiento/Acci√≥n/Entrada de Acci√≥n/Observaci√≥n puede repetirse N veces)
Pensamiento: ahora s√© la respuesta final
Respuesta Final: la respuesta final a la pregunta de entrada original

Comienza!

Pregunta: {input}
Pensamiento: {agent_scratchpad}
""")

# Crear el agente
agent = create_react_agent(llm, tools, agent_prompt)
agent_executor = AgentExecutor(
    agent=agent, 
    tools=tools, 
    verbose=True,
    max_iterations=3,
    handle_parsing_errors=True
)

# Tambi√©n configurar un chat simple sin agente para preguntas b√°sicas
simple_chat_prompt = ChatPromptTemplate.from_messages([
    ("system", "Eres un asistente √∫til y amigable. Responde de manera clara y concisa."),
    ("user", "{pregunta}")
])

simple_chain = simple_chat_prompt | llm | StrOutputParser()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        pregunta = data.get('pregunta', '')
        modo = data.get('modo', 'simple')  # 'simple' o 'agente'
        
        if not pregunta:
            return jsonify({'error': 'No se proporcion√≥ ninguna pregunta'}), 400
        
        if modo == 'agente':
            # Usar el agente para preguntas que puedan requerir b√∫squeda web
            respuesta = agent_executor.invoke({"input": pregunta})
            return jsonify({
                'respuesta': respuesta['output'],
                'modo': 'agente'
            })
        else:
            # Usar chat simple para preguntas b√°sicas
            respuesta = simple_chain.invoke({"pregunta": pregunta})
            return jsonify({
                'respuesta': respuesta,
                'modo': 'simple'
            })
            
    except Exception as e:
        return jsonify({'error': f'Error al procesar la pregunta: {str(e)}'}), 500

@app.route('/ejemplo-agente', methods=['POST'])
def ejemplo_agente():
    """Endpoint espec√≠fico para demostrar capacidades del agente"""
    try:
        ejemplos = [
            "¬øCu√°l es el clima actual en Quito, Ecuador?",
            "¬øQui√©n gan√≥ la final de la Champions League m√°s reciente?",
            "¬øCu√°les son las √∫ltimas noticias sobre inteligencia artificial?",
            "¬øCu√°l es el precio actual del Bitcoin?"
        ]
        
        pregunta_ejemplo = ejemplos[0]  # Tomar el primer ejemplo
        
        respuesta = agent_executor.invoke({"input": pregunta_ejemplo})
        
        return jsonify({
            'pregunta': pregunta_ejemplo,
            'respuesta': respuesta['output'],
            'modo': 'agente'
        })
        
    except Exception as e:
        return jsonify({'error': f'Error en ejemplo de agente: {str(e)}'}), 500

if __name__ == '__main__':
    print("ü§ñ Iniciando aplicaci√≥n de IA con Agentes...")
    print("üìä Modelo: Google Gemini Pro")
    print("üîç Herramientas: B√∫squeda web con DuckDuckGo")
    print("üåê Servidor: http://127.0.0.1:5000")
    app.run(debug=True, host='127.0.0.1', port=5000)
